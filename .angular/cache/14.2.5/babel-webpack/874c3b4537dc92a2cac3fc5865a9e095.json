{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Component, ChangeDetectionStrategy, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    circle: a0,\n    progress: a1,\n    \"progress-dark\": a2,\n    pulse: a3\n  };\n};\n\nfunction NgxSkeletonLoaderComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(4, _c0, ctx_r0.appearance === \"circle\", ctx_r0.animation === \"progress\", ctx_r0.animation === \"progress-dark\", ctx_r0.animation === \"pulse\"))(\"ngStyle\", ctx_r0.theme);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel)(\"aria-valuetext\", ctx_r0.loadingText);\n  }\n}\n\nconst NGX_SKELETON_LOADER_CONFIG = new InjectionToken('ngx-skeleton-loader.config');\nlet NgxSkeletonLoaderComponent = /*#__PURE__*/(() => {\n  class NgxSkeletonLoaderComponent {\n    constructor(config) {\n      const {\n        appearance = 'line',\n        animation = 'progress',\n        theme = null,\n        loadingText = 'Loading...',\n        count = 1,\n        ariaLabel = 'loading'\n      } = config || {};\n      this.appearance = appearance;\n      this.animation = animation;\n      this.theme = theme;\n      this.loadingText = loadingText;\n      this.count = count;\n      this.items = [];\n      this.ariaLabel = ariaLabel;\n    }\n\n    ngOnInit() {\n      start('NgxSkeletonLoader:Rendered');\n      start('NgxSkeletonLoader:Loaded');\n      this.validateInputValues();\n    }\n\n    validateInputValues() {\n      // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n      if (!/^\\d+$/.test(`${this.count}`)) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`);\n        }\n\n        this.count = 1;\n      }\n\n      this.items.length = this.count;\n      const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n\n      if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to \"progress\".`);\n        }\n\n        this.animation = 'progress';\n      }\n\n      if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`);\n        }\n\n        this.appearance = '';\n      }\n    }\n\n    ngOnChanges(changes) {\n      // Avoiding multiple calls for the same input in case there's no changes in the fields\n      // Checking if the fields that require validation are available and if they were changed\n      // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n      if (['count', 'animation', 'appearance'].find(key => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {\n        return;\n      }\n\n      this.validateInputValues();\n    }\n\n    ngAfterViewInit() {\n      end('NgxSkeletonLoader:Rendered');\n    }\n\n    ngOnDestroy() {\n      end('NgxSkeletonLoader:Loaded');\n    }\n\n  }\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  NgxSkeletonLoaderComponent.ɵfac = function NgxSkeletonLoaderComponent_Factory(t) {\n    return new (t || NgxSkeletonLoaderComponent)(i0.ɵɵdirectiveInject(NGX_SKELETON_LOADER_CONFIG, 8));\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  NgxSkeletonLoaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxSkeletonLoaderComponent,\n    selectors: [[\"ngx-skeleton-loader\"]],\n    inputs: {\n      count: \"count\",\n      loadingText: \"loadingText\",\n      appearance: \"appearance\",\n      animation: \"animation\",\n      ariaLabel: \"ariaLabel\",\n      theme: \"theme\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"skeleton-loader\", \"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"0\", 3, \"ngClass\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"0\", 1, \"skeleton-loader\", 3, \"ngClass\", \"ngStyle\"]],\n    template: function NgxSkeletonLoaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxSkeletonLoaderComponent_span_0_Template, 1, 9, \"span\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgClass, i1.NgStyle],\n    styles: [\".skeleton-loader[_ngcontent-%COMP%]{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader[_ngcontent-%COMP%]:after, .skeleton-loader[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.circle[_ngcontent-%COMP%]{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%]{transform:translate(0)}.skeleton-loader.progress[_ngcontent-%COMP%]:after, .skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:after, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse[_ngcontent-%COMP%]{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%], .skeleton-loader.progress[_ngcontent-%COMP%]{-webkit-animation:none;animation:none}.skeleton-loader.progress[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%]{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\"],\n    changeDetection: 0\n  });\n  return NgxSkeletonLoaderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxSkeletonLoaderModule = /*#__PURE__*/(() => {\n  class NgxSkeletonLoaderModule {\n    static forRoot(config) {\n      return {\n        ngModule: NgxSkeletonLoaderModule,\n        providers: [{\n          provide: NGX_SKELETON_LOADER_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  NgxSkeletonLoaderModule.ɵfac = function NgxSkeletonLoaderModule_Factory(t) {\n    return new (t || NgxSkeletonLoaderModule)();\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  NgxSkeletonLoaderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxSkeletonLoaderModule\n  });\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n  NgxSkeletonLoaderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgxSkeletonLoaderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-skeleton-loader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NGX_SKELETON_LOADER_CONFIG, NgxSkeletonLoaderComponent, NgxSkeletonLoaderModule }; //# sourceMappingURL=ngx-skeleton-loader.mjs.map","map":null,"metadata":{},"sourceType":"module"}